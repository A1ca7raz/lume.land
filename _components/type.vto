{{> function printDef(def) {
  if (def.type === "array") {
    return `<em>${def.children.type}[]</em>`;
  } else {
    return `<em>${def.value || def.type}</em>`;
  }
}
}}

<dl class="type">
  {{ for name, info of options }}
  {{# {{ JSON.stringify(info)}} #}}
  <div>
    <dt class="type-name">
      <strong>{{ name }}</strong>
      {{ if info.type === "union" }}
        {{ info.children.map(printDef).join(" ")}}
      {{ else }}
        {{ printDef(info) }}
      {{ /if }}
    </dt>
    <dd class="type-details">
      {{ info.description |> md |> replace("<style>", "style") }}

      {{ if info.default !== undefined }}
        <strong>Default:</strong> <pre><code class="language-js hljs">{{ Deno.inspect(info.default) }}</code></pre>
      {{ /if }}

      {{ if info.type === "object" && info.children }}
        {{ await comp.type({ options: info.children })}}
      {{ /if }}
    </dd>
  </div>
  {{ /for }}
</dl>
