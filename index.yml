layout: layouts/landing.njk
title: Lume, the static site generator for Deno
description: Support for multiple file formats like Markdown, YAML, JavaScript, TypeScript, JSX, Nunjucks etc.
header:
  title: Lume is a <span>simple & elegant</span> static site generator for Deno

install:
  title: "Run the following to [install](./docs/overview/installation.md):"
  code: deno run -A https://deno.land/x/lume/install.ts
  url: /tutorial/your-first-page/

usage:
  - title: Supports any template engine
    description: |
      Create pages using Markdown, Nunjucks, Liquid, JSX, TSX, JavaScript, TypeScript, Pug, Eta… or add your own engine easily.
    code: |
      <lume-code>

      ```md { title=".md" }
      # Galician municipalities

      - O Pino
      - Tordoia
      - Ordes
      - Cedeira
      ```
      ```html { title=".njk" }
      <h1>{{ title }}</h1>

      <ul>
        {% for item in items %}
        <li>{{ item | safe }}</li>
        {% endfor %}
      </ul>
      ```
      ```html { title=".liquid" }
      <h1>{{ title }}</h1>

      <ul>
        {% for item in items %}
        <li>{{ item }}</li>
        {% endfor %}
      </ul>
      ```
      ```jsx { title=".jsx" }
      export default function ({ title, items }) {
        return <>
          <h1>{ title }</h1>

          <ul>
            { items.map((item) => <li>{ item }</li>)}
          </ul>
        </>;
      }
      ```
      ```js { title=".tmpl.js" }
      export default function ({ title, items }) {
        return `
        <h1>${ title }</h1>

        <ul>
          ${ items.map((item) => `<li>${ item }</li>`)}
        </ul>
        `;
      }
      ```
      ```ts { title=".tmpl.ts" }
      interface Data {
        title: string;
        items: string[];
      }

      export default function ({ title, items }: Data): string {
        return `
        <h1>${ title }</h1>

        <ul>
          ${ items.map((item) => `<li>${ item }</li>`)}
        </ul>
        `;
      }
      ```

      ```yml { title=".pug" }
      h1= title
      ul
        each item in items
          li= item
      ```

      ```html { title=".eta" }
      <h1><%= title %></h1>

      <ul>
      <% for (const item of items) { %>
        <li><%= item %></li>
      <% }) %>
      </ul>
      ```

      </lume-code>

  - title: Store the data in your favorite format
    description: |
      Store your data using static formats like JSON or YAML. Use JavaScript or TypeScript to get the data from a Database or API.
    code: |
      <lume-code>

      ```yaml { title=".yml" }
      title: Galician municipalities
      items:
        - O Pino
        - Tordoia
        - Ordes
        - Cedeira
      ```
      ```json { title=".json" }
      {
        "title": "Galician municipalities",
        "items": [
          "O Pino",
          "Tordoia",
          "Ordes",
          "Cedeira"
        ]
      }
      ```
      ```js { title=".js" }
      export const title = "Galician municipalities";
      export const items = [
        "O Pino",
        "Tordoia",
        "Ordes",
        "Cedeira"
      ];
      ```
      ```ts { title=".ts" }
      const title = "Galician municipalities";

      const response = await fetch("https://example.com/galician-minicipalities.json");
      const groups = (await response.json()) as string[];
      export { title, items };
      ```

      </lume-code>
  
  - title: Process HTML pages and assets
    description: |
      Processors can compile and optimize assets like CSS or JavaScript. They can also transform the HTML code using the DOM API.
    code: |
      <lume-code>

      ```js { title="Process assets" }
      site.process([".css"], (file) => {
        file.content = customTransform(file.content);
      })
      ```
      ```js { title="DOM API" }
      site.process([".html"], (page) => {
        page.document.querySelectorAll("h1", (title) => {
          title.innerText = title.innerText.toUpperCase();
        })
      })
      ```

      </lume-code>

  - title: Run your scripts and listen for events
    description: |
      You can create custom scripts like in NPM and execute them from the CLI or after any event.
    code: |
      <lume-code>

      ```js { title="Script creation" }
      site.script("deploy", "rsync -r _site/ user@host.com:/site");
      ```
      ```js { title="Events" }
      site.addEventListener("afterBuild", "deploy");
      site.addEventListener("afterBuild", () => console.log("site build"));
      ```
      ```sh { title="Script runner" }
      lume run deploy
      ```

      </lume-code>

  - title: And everything with a clean and intuitive API
    description: |
      Configure your site build in a single _config.ts or _config.js file [with plugins](/plugins/) and a simple and clean API.
    code: |
      <lume-code>

      ```ts { title="Default _config.ts file" }
      import lume from "lume/mod.ts";

      const site = lume();

      export default site;
      ```
      ```ts { title="With plugins" }
      import lume from "lume/mod.ts";
      import parcelCSS from "lume/plugins/parcel_css.ts";
      import esbuild from "lume/plugins/esbuild.ts";
      import svgo from "lume/plugins/svgo.ts";
      import jsx from "lume/plugins/jsx.ts";
      import date from "lume/plugins/date.ts";

      const site = lume();

      site.use(parcelCSS())
          .use(esbuild())
          .use(svgo())
          .use(jsx())
          .use(date());

      export default site;
      ```

      </lume-code>

features:
  - title: It's Deno!
    img: /icons/deno.svg
    description: Forget about managing thousands of packages in node_modules or complex bundlers. Lume only installs what you need. Clean, fast and secure.

  - title: Zero runtime overhead
    img: /icons/stack.svg
    description: Lume only exports your code. It doesn't generate any extra JavaScript code.

  - title: Deploy anywhere
    img: /icons/deploy.svg
    description: Static sites can be hosted (for free) anywhere GitHub/GitLab Pages, Deno Deploy, Vercel, Netlify… [More info](/docs/advanced/deployment.md)

  - title: Easy to extend
    img: /icons/extend.svg
    description: Want to use a new template engine or use a new JavaScript compiler? Lume allows you to use whatever you want. [Explore the official plugins](/plugins/)

examples:
  title: Who is using Lume?
  more:
    text: See more examples
    href: /showcase/

support:
  title: Lume is supported by

  sponsors:
    - name: Óscar Otero (creator & maintainer)
      url: https://oscarotero.com/
      img: /img/avatars/oscar.webp
    - name: Androw Nash
      url: https://audrow.github.io/
      img: /img/avatars/audrow.webp
      amount: 5
      recurrent: true
    - name: Yuto Oguchi
      url: https://aiotter.com/
      img: /img/avatars/aiotter.webp
      amount: 1
      recurrent: true
    - name: Tobias Schmidt
      url: https://tobiasschmidt.me/
      img: /img/avatars/tobias.webp
      amount: 20
    - name: Yohan Brook
      url: https://johan.im/
      img: /img/avatars/johan.webp
      amount: 20
    - name: Reese Schultz
      url: https://reese.codes/
      img: /img/avatars/reeseschultz.webp
      amount: 5
      recurrent: true

  contribute:
    title: How to contribute?
    description: |
      - Star the [repo in GitHub](https://github.com/lumeland/lume) or vote in [Product Hunt](https://www.producthunt.com/posts/lume-2).
      - Support this project on [Open collective](https://opencollective.com/lume) or [sponsor me](https://github.com/sponsors/oscarotero).
      - Fork the repo and [contribute](https://github.com/lumeland/lume/graphs/contributors) fixing bugs or adding new features.
      - Help to [improve the docs](https://github.com/lumeland/lume.land).
      - Spread to the world your love for Lume in a tweet, post or any kind of publication.
      - Get help and propose ideas [at Discord](https://discord.gg/YbTmpACHWB).

testimonials:
  title: What people say?
  quotes:
    - url: https://twitter.com/bradenthehair/status/1531357349356654592
      author: Braden East (@bradenthehair)
      avatar: /img/avatars/bradenthehair.webp
      date: May 30, 2022
      text: Lume is a fantastic tool. It’s more powerful and flexible than any static site generator I’ve used in 5 years of web development.

    - url: https://twitter.com/dragonwocky/status/1531413299757457408
      author: "@dragonwocky"
      avatar: /img/avatars/dragonwocky.webp
      date: May 31, 2022
      text: |
        Deno is awesome. If you use it right, you&#39;ll never want to go back to Node - and Lume (<a href="https://t.co/EIFgNe07Sc">https://t.co/EIFgNe07Sc</a>) does it right: powerful, developer-friendly, super simple, and extremely flexible static site generation.

    - url: https://twitter.com/tarugoconf/status/1543881979426381824
      author: Tarugoconf (@tarugoconf)
      avatar: /img/avatars/tarugoconf.webp
      date: July 4, 2022
      text: ¿No habíamos contado que el código de la web de la <a href="https://twitter.com/hashtag/tarugo22?src=hash&amp;ref_src=twsrc%5Etfw">#tarugo22</a> es COMPLETAMENTE OPEN SOURCE? <br>¿Y tampoco que está creada con tecnología gallega? <a href="https://t.co/5hJNkf7otY">https://t.co/5hJNkf7otY</a>

    - url: https://twitter.com/matthewcp/status/1522572060182171649
      author: Matthew Phillips (@matthewcp)
      avatar: /img/avatars/mattew.webp
      date: May 6, 2022
      text: This is a nice looking static site generator for Deno. Reminds me of 11ty a bit. <a href="https://t.co/EiE4yOHlmS">https://t.co/EiE4yOHlmS</a>

    - url: https://twitter.com/automaetopia/status/1420960967534563329
      author: "@automaetopia"
      avatar: /img/avatars/automaetopia.webp
      date: July 30, 2021
      text: I was having paralysis regarding what static generator to write my website in and I’ve finally decided to settle on Lume (a static generator written in Deno). I like it and it’s easy to configure

    - url: https://twitter.com/kuspoes/status/1408642055241302018
      author: Poes (@kuspoes)
      avatar: /img/avatars/kuspoes.webp
      date: June 26, 2021
      text: tapi sekarang sih pengennya pakai lumeland<a href="https://t.co/v6konf7O0Z">https://t.co/v6konf7O0Z</a>

    - url: https://twitter.com/fserb/status/1390404312581410817
      author: Fernando Serboncini (@fserb)
      avatar: /img/avatars/fserb.webp
      date: May 6, 2021
      text: Personally I migrated from Jekyll to Eleventy to Lume (<a href="https://t.co/aSHo422kxJ">https://t.co/aSHo422kxJ</a>). And I love it. Github pages is fine, if you are building it yourself (not relying on Github&#39;s MD parser).

    - url: https://twitter.com/brianleroux/status/1337081772278870016
      author: Brian LeRoux (@brianleroux)
      avatar: /img/avatars/brianleroux.webp
      date: December 10, 2020
      text: Lume…another Static Site Generator (SSG) but this time built on Deno. 🔥🦖 <br><br>Love the logo.<a href="https://t.co/ajHHcXMnfq">https://t.co/ajHHcXMnfq</a>

    - url: https://twitter.com/deno_land/status/1403052999673618438
      author: Deno (@deno_land)
      avatar: /img/avatars/deno.webp
      date: June 10, 2021
      text: lume, a Static Site Generator for Deno <a href="https://t.co/l3Ko6nWy2H">https://t.co/l3Ko6nWy2H</a>