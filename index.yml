layout: layouts/landing.njk
header:
  title: Lume is a friendly <br>& elegant static site generator for Deno

install:
  title: "Run the following to install:"
  code: deno run -A https://deno.land/x/lume/install.ts
  footer: Make sure [you have Deno 1.18.1 or newer installed](https://deno.land/manual/getting_started/installation).
  url: /tutorial/step-1/

usage:
  - title: Supports any template engine
    description: |
      Create pages using Markdown, Nunjucks, Liquid, JSX, TSX, Javascript, Typescript, Pug, Eta… or add your own engine easily.
    code: |
      <lume-code>

      ```md { title="Markdown" }
      # Galician municipalities

      - O Pino
      - Tordoia
      - Ordes
      - Cedeira
      ```
      ```html { title="Nunjucks" }
      <h1>{{ title }}</h1>

      <ul>
        {% for item in items %}
        <li>{{ item }}</li>
        {% endfor %}
      </ul>
      ```
      ```jsx { title="JSX" }
      export default function ({ title, items }) {
        return <>
          <h1>{ title }</h1>

          <ul>
            { items.map((item) => <li>{ item }</li>)}
          </ul>
        </>;
      }
      ```
      ```js { title="Javascript" }
      export default function ({ title, items }) {
        return `
        <h1>${ title }</h1>

        <ul>
          ${ items.map((item) => `<li>${ item }</li>`)}
        </ul>
        `;
      }
      ```
      ```ts { title="Typescript" }
      interface Data {
        title: string;
        items: string[];
      }

      export default function ({ title, items }: Data): string {
        return `
        <h1>${ title }</h1>

        <ul>
          ${ items.map((item) => `<li>${ item }</li>`)}
        </ul>
        `;
      }
      ```

      ```yml { title="Pug" }
      h1= title
      ul
        each item in items
          li= item
      ```

      ```html { title="Eta" }
      <h1><%= title %></h1>

      <ul>
      <% for (const item of items) { %>
        <li><%= item %></li>
      <% }) %>
      </ul>
      ```

      </lume-code>

  - title: Store the data in your favorite format
    description: |
      Store your data using static formats like JSON or YAML. Use Javascript or Typescript to get the data from a Database or API.
    code: |
      <lume-code>

      ```yaml { title="YAML" }
      title: Galician municipalities
      items:
        - O Pino
        - Tordoia
        - Ordes
        - Cedeira
      ```
      ```json { title="JSON" }
      {
        "title": "Galician municipalities",
        "items": [
          "O Pino",
          "Tordoia",
          "Ordes",
          "Cedeira"
        ]
      }
      ```
      ```js { title="Javascript" }
      export const title = "Galician municipalities";
      export const items = [
        "O Pino",
        "Tordoia",
        "Ordes",
        "Cedeira"
      ];
      ```
      ```ts { title="Typescript + API" }
      const title = "Galician municipalities";

      const response = await fetch("https://example.com/galician-minicipalities.json");
      const groups = (await response.json()) as string[];
      export { title, items };
      ```

      </lume-code>
  
  - title: Process HTML pages and assets
    description: |
      Processors can compile and optimize assets like CSS or Javascript. They can also transform the HTML code using the DOM API.
    code: |
      <lume-code>

      ```js { title="Process assets" }
      site.process([".css"], (file) => {
        file.content = customTransform(file.content);
      })
      ```
      ```js { title="DOM API" }
      site.process([".html"], (page) => {
        page.document.querySelectorAll("h1", (title) => {
          title.innerText = title.innerText.toUpperCase();
        })
      })
      ```

      </lume-code>

  - title: Run your scripts and listen events
    description: |
      You can create custom scripts like in NPM and execute them from the CLI or after any event.
    code: |
      <lume-code>

      ```js { title="Script creation" }
      site.script("deploy", "rsync -r _site/ user@host.com:/site");
      ```
      ```js { title="Events" }
      site.addEventListener("afterBuild", "deploy");
      site.addEventListener("afterBuild", () => console.log("site build"));
      ```
      ```sh { title="Script runner" }
      lume run deploy
      ```

      </lume-code>

  - title: And everything with a clean and intuitive API
    description: |
      Configure your site build in a single _config.ts or _config.js file with plugins and a simple and clean API.
    code: |
      <lume-code>

      ```ts { title="Default _config.ts file" }
      import lume from "lume/mod.ts";

      const site = lume();

      export default site;
      ```
      ```ts { title="With plugins" }
      import lume from "lume/mod.ts";
      import parcelCSS from "lume/plugins/parcel_css.ts";
      import esbuild from "lume/plugins/esbuild.ts";
      import svgo from "lume/plugins/svgo.ts";
      import jsx from "lume/plugins/jsx.ts";
      import date from "lume/plugins/date.ts";

      const site = lume();

      site.use(parcelCSS())
          .use(esbuild())
          .use(svgo())
          .use(jsx())
          .use(date());

      export default site;
      ```

      </lume-code>

points:
  title: Less magic, more freedom

  features:
    - title: It's Deno!
      description: Forget about managing thousands of packages in node_modules or complex bundlers. Lume only installs what you need. Clean, fast and secure.

    - title: Zero runtime overhead
      description: Some SSG ships their own client javascript to load and hydrate pages.

    - title: Deploy anywhere
      description: Build your site in any CI like Github/Gitlab Pages, Deno deploy, Vercel, Netflify… and host it anywhere.

    - title: Easy to extend
      description: Want to use a new template engine or use a new javascript compiler? Lume allows to use whatever you want.

examples:
  title: Who is using Lume?
  more:
    text: See more examples
    href: /showcase/
  sites:
    - title: Oak Studio
      url: https://oakstudio.co/
      img: /img/showcase/oak.png
    - title: Johan's website & blog
      url: https://johan.im/
      img: /img/showcase/johan.png
    - title: Jurnal Kusaeni
      url: https://kusaeni.com/
      img: /img/showcase/kusaeni.png
    - title: Notion Enhancer documentation
      url: https://notion-enhancer.github.io/
      img: /img/showcase/notion-enhancer.png
    - title: OAK Studio
      url: https://oakstudio.co/
      img: /img/showcase/oak.png
    - title: Tarugo21
      url: https://www.tarugoconf.com/
      img: /img/showcase/tarugo21.png
    - title: Tobias Schmidt
      url: https://tobiasschmidt.me/
      img: /img/showcase/tobias.png
    - title: Velociraptor documentation
      url: https://velociraptor.run/
      img: /img/showcase/velociraptor.png

support:
  title: Lume is supported by
  sponsors:
    - name: Óscar Otero (creator & maintainer)
      url: https://oscarotero.com/
      img: /img/avatars/oscar.jpg
    - name: Androw Nash
      url: https://audrow.github.io/
      img: /img/avatars/audrow.jpg
      amount: 5
      recurrent: true
    - name: Yuto Oguchi
      url: https://aiotter.com/
      img: /img/avatars/aiotter.jpg
      amount: 1
      recurrent: true
    - name: Tobias Schmidt
      url: https://tobiasschmidt.me/
      img: /img/avatars/tobias.png
      amount: 20
    - name: Yohan Brook
      url: https://johan.im/
      img: /img/avatars/johan.jpg
      amount: 20

  contribute:
    title: How to contribute?
    description: |
      - Star the [repo in GitHub](https://github.com/lumeland/lume).
      - Support this project on [Open collective](https://opencollective.com/lume).
      - Fork the repo and [work on an issue](https://github.com/lumeland/lume/issues).
      - Help to [improve the docs](https://github.com/lumeland/lumeland.github.io).
      - Propose ideas [at Discord](https://discord.gg/YbTmpACHWB).
